#include "common.h"
#include "sload.h"

#define	USE_4_DETAIL

#if defined(USE_TDETAIL) && defined(USE_4_DETAIL)
#	define	USE_4_BUMP
#endif

#ifdef USE_4_BUMP
#if defined(USE_R2_STATIC_SUN) && !defined(USE_LM_HEMI)
layout(location = 0) in vec4	tcdh;		// Texture coordinates,         w=sun_occlusion
#else
layout(location = 0) in vec2	tcdh;		// Texture coordinates
#endif
layout(location = 1) in vec4	position;	// position + hemi
layout(location = 2) in vec3	M1;			// nmap 2 eye - 1
layout(location = 3) in vec3	M2;			// nmap 2 eye - 2
layout(location = 4) in vec3	M3;			// nmap 2 eye - 3
#if defined(USE_PARALLAX) || defined(USE_STEEPPARALLAX)
layout(location = 5) in vec3	eye;		// vector to point in tangent space
  #ifdef USE_TDETAIL
layout(location = 6) in vec2	tcdbump;	// d-bump
    #ifdef USE_LM_HEMI
layout(location = 7) in vec2	lmh;		// lm-hemi
    #endif
  #else
    #ifdef USE_LM_HEMI
layout(location = 6) in vec2	lmh;		// lm-hemi
    #endif
  #endif
#else
  #ifdef USE_TDETAIL
layout(location = 5) in vec2	tcdbump;	// d-bump
    #ifdef USE_LM_HEMI
layout(location = 6) in vec2	lmh;		// lm-hemi
    #endif
  #else
    #ifdef USE_LM_HEMI
layout(location = 5) in vec2	lmh;		// lm-hemi
    #endif
  #endif
#endif
#else
#if defined(USE_R2_STATIC_SUN) && !defined(USE_LM_HEMI)
layout(location = 0) in vec4	tcdh;		// Texture coordinates,         w=sun_occlusion
#else
layout(location = 0) in vec2	tcdh;		// Texture coordinates
#endif
layout(location = 1) in vec4	position;	// position + hemi
layout(location = 2) in vec3	N;			// Eye-space normal        (for lighting)
#ifdef USE_TDETAIL
layout(location = 3) in vec2	tcdbump;	// d-bump
    #ifdef USE_LM_HEMI
layout(location = 4) in vec2	lmh;		// lm-hemi
    #endif
#else
    #ifdef USE_LM_HEMI
layout(location = 3) in vec2	lmh;		// lm-hemi
    #endif
#endif
#endif

layout(location = 0) out vec4	P;			// px,py,pz, m-id
layout(location = 1) out vec4	Ne;			// nx,ny,nz, hemi
layout(location = 2) out vec4	C;			// r, g, b,  gloss

void 		main	()
{
 	// diffuse
	half4 D		= tbase		(tcdh);			// IN:  rgb.a
	half4 L 	= tex2D		(s_lmap, tcdh);

	half	G	= def_gloss	;

# ifdef	USE_TDETAIL
 # ifdef USE_4_DETAIL
	half4	mask= tex2D		(s_mask, tcdh);
	half 	mag	= dot 		(mask,1);
			mask= mask/mag	;

	half3	d_R	= tex2D		(s_dt_r, tcdbump)*mask.r;
	half3	d_G	= tex2D		(s_dt_g, tcdbump)*mask.g;
	half3	d_B	= tex2D		(s_dt_b, tcdbump)*mask.b;
	half3	d_A	= tex2D		(s_dt_a, tcdbump)*mask.a;
	half3	dt	= d_R+d_G+d_B+d_A;
		D.rgb	= 2*D.rgb*dt	 ;

  # ifdef USE_4_BUMP

 	 half4	n_Rt = tex2D	(s_dn_r, tcdbump).wzyx;
	 half4	n_Gt = tex2D	(s_dn_g, tcdbump).wzyx;
	 half4	n_Bt = tex2D	(s_dn_b, tcdbump).wzyx;
	 half4	n_At = tex2D	(s_dn_a, tcdbump).wzyx;
	 
 	 half3	n_R = (n_Rt-0.5)*mask.r; half g_R=n_Rt.w*mask.r;
	 half3	n_G = (n_Gt-0.5)*mask.g; half g_G=n_Gt.w*mask.g;
	 half3	n_B = (n_Bt-0.5)*mask.b; half g_B=n_Bt.w*mask.b;
	 half3	n_A = (n_At-0.5)*mask.a; half g_A=n_At.w*mask.a;

	 half3	mix		= 	n_R+n_G+n_B+n_A;
			mix.z	*=	0.5;		//. make bump twice as contrast (fake, remove me if possible)
	 half3	N		= 	mul     	(half3x3(I.M1, I.M2, I.M3), mix.xyz);

	 	 	G 		= 	g_R+g_G+g_B+g_A;
//			G 	= 0			;
//			G 	= mix.w		;		// gloss
  # else
	half3	N 	= I.N.xyz	;
  # endif

 # else
	D.rgb	= 2*D.rgb*tex2D	(s_detail, tcdbump).rgb;
 # endif
# else
	half3	N 	= N.xyz	;
# endif

	// hemi, sun, material
	half 	ms	= xmaterial	;
# ifdef USE_R2_STATIC_SUN
		 	ms 	= L.w		;
# endif

  // 2. Standart output
  Ne		= half4(normalize(N), D.w);	// hemi
  P			= half4(position.xyz + Ne.xyz*def_virtualh/2.f, ms);	//
  C			= half4(D.x, D.y, D.z, G);	// OUT: rgb.gloss
}
