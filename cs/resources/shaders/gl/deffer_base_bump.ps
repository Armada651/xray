#include "common.h"
#include "sload.h"

#if defined(USE_R2_STATIC_SUN) && !defined(USE_LM_HEMI)
layout(location = 0) in vec4	tcdh;	// Texture coordinates,         w=sun_occlusion
#else
layout(location = 0) in vec2	tcdh;	// Texture coordinates
#endif
layout(location = 1) in vec4	position;	// position + hemi
layout(location = 2) in vec3	M1;	// nmap 2 eye - 1
layout(location = 3) in vec3	M2;	// nmap 2 eye - 2
layout(location = 4) in vec3	M3;	// nmap 2 eye - 3
#if defined(USE_PARALLAX) || defined(USE_STEEPPARALLAX)
layout(location = 5) in vec3	eye;	// vector to point in tangent space
  #ifdef USE_TDETAIL
layout(location = 6) in vec2	tcdbump;	// d-bump
    #ifdef USE_LM_HEMI
layout(location = 7) in vec2	lmh;		// lm-hemi
    #endif
  #else
    #ifdef USE_LM_HEMI
layout(location = 6) in vec2	lmh;		// lm-hemi
    #endif
  #endif
#else
  #ifdef USE_TDETAIL
layout(location = 5) in vec2	tcdbump;	// d-bump
    #ifdef USE_LM_HEMI
layout(location = 6) in vec2	lmh;		// lm-hemi
    #endif
  #else
    #ifdef USE_LM_HEMI
layout(location = 5) in vec2	lmh;		// lm-hemi
    #endif
  #endif
#endif

layout(location = 0) out vec4	P;			// px,py,pz, m-id
layout(location = 1) out vec4	hemi;		// nx,ny,nz, hemi
layout(location = 2) out vec4	gloss;		// r, g, b,  gloss

void main ()
{
	p_bumped I;
	I.tcdh = tcdh;
	I.position = position;
	I.M1 = M1;
	I.M2 = M2;
	I.M3 = M3;
#if defined(USE_PARALLAX) || defined(USE_STEEPPARALLAX)
	I.eye = eye;
#endif
#ifdef USE_TDETAIL
	I.tcdbump = tcdbump;
#endif
#ifdef USE_LM_HEMI
	I.lmh = lmh;
#endif
	surface_bumped 	S 	= sload 	(I);

	// Sample normal, rotate it by matrix, encode position 
	half3 Ne				= mul       (S.normal, half3x3(M1, M2, M3));
		Ne					= normalize	(Ne);

	// hemi,sun,material
	half 	ms	= xmaterial		;
#ifdef USE_LM_HEMI
	half4	lm 	= tex2D			(s_hemi, lmh);
//	half 	h  	= dot			(lm.rgb,1.f/3.f);
	half 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
//		 	ms 	= lm.w;
			ms 	= get_sun(lm);
# endif
#else
	half 	h	= position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= tcdh.w		;
# endif
#endif

	hemi		= half4		(Ne, 										h		);
	P  			= half4 	(position.xyz + Ne*S.height*def_virtualh, ms		);
//	P			= half4 	(position.xyz, ms);
	gloss		= half4		(S.base.xyz, 								S.gloss	);							// OUT: rgb.gloss

//	P  			= half4 	(1,1,1,1);
//	Ne 			= half4		(1,1,1,1);
//	C			= half4		(1,1,1,1);
}
